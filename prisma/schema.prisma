generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  agencyId           Int?      // Foreign key to the Agency table
  branchId           Int?      // Foreign key to the Branch table
  name               String
  email              String    @unique
  communicationEmail String?   // Added: Optional email for communications
  mobile1            String?   // Added: Primary mobile number
  mobile2            String?   // Added: Secondary mobile number
  password           String
  role               String
  active             Boolean   @default(true)
  lastLogin          DateTime?
  resetToken         String?   
  resetTokenExpires  DateTime?
  agency             Agency?   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  branch             Branch?   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@map("users")
}

model Package {
  id              Int       @id @default(autoincrement())
  packageName     String    @map("packages")
  numberOfBranches Int
  usersPerBranch  Int
  periodInMonths  Int
  cost            Decimal   @db.Decimal(10, 2) // Updated to Decimal type with precision and scale
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("packages")
  Subscription    Subscription[]  
  Agency          Agency[]       
}

model Agency {
  id                   Int       @id @default(autoincrement())
  currentSubscriptionId Int?     // Foreign key to the Subscription table
  businessName         String    // Business name
  addressLine1         String    // Address Line 1
  addressLine2         String?   // Address Line 2 (optional)
  state                String?    
  city                 String?    
  pincode              String?    
  currentSubscription  Subscription? @relation("CurrentSubscription", fields: [currentSubscriptionId], references: [id])
 uploadUUID          String?  // Stores the UUID directory name
  logoFilename        String?  // Stores only the filename for the logo
  letterheadFilename  String?  // Stores only the filename for the letterhead
  contactPersonName    String    // Contact person name
  contactPersonEmail   String    // Contact person email
  contactPersonPhone   String    // Contact person phone
  gstin                String    // GSTIN
  subscriptions        Subscription[] @relation("AgencySubscriptions") 
  users                User[]         
  branches             Branch[]
  countries            Country[]
  states               State[]
  cities               City[]
  sectors              Sector[]
  accommodations       Accommodation[]
  vehicles             Vehicle[]
  airlines             Airline[]
  hotels               Hotel[]
  clients               Client[]
  banks               Bank[]
  fairs               Fair[]
  tours               Tour[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@map("agencies") // Map the table name to "agencies"
  Package Package[]  // Added onDelete: Cascade
}

model Subscription {
  id              Int       @id @default(autoincrement())
  agencyId        Int       // Foreign key to the Agency table
  agency          Agency    @relation("AgencySubscriptions", fields: [agencyId], references: [id], onDelete: Cascade)
  packageId       Int       // Foreign key to the Package table
  package         Package   @relation(fields: [packageId], references: [id])
  cost            Decimal   @db.Decimal(10, 2) // Added cost field with Decimal type
  startDate       DateTime  // Subscription start date
  endDate         DateTime  // Subscription end date
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("subscriptions") // Map the table name to "subscriptions"
  Agency Agency[] @relation("CurrentSubscription")
}

model Branch {
  id            Int       @id @default(autoincrement())
  agencyId      Int      // Foreign key to Agency
  branchName    String
  address       String
  contactName   String
  contactEmail  String
  contactMobile String
  agency        Agency    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  users         User[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("branches")
}

model Country {
  id        Int      @id @default(autoincrement())
  agencyId  Int
  agency   Agency   @relation(fields:[agencyId],references: [id], onDelete: Cascade)
  countryName      String   //@unique
  states    State[]  // One-to-many relationship with State
 hotelAddresses  Hotel[] @relation("HotelCountry")
officeAddresses Hotel[] @relation("OfficeCountry")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("countries") // Map the table name to "countries"
}

model State {
  id        Int      @id @default(autoincrement())
   agencyId  Int
  agency   Agency   @relation(fields:[agencyId],references: [id], onDelete: Cascade)
   countryId Int      // Foreign key to the Country table
  country   Country  @relation(fields: [countryId], references: [id],onDelete: Cascade) //onDelete cascade
  stateName      String   
  cities    City[]   // One-to-many relationship with City
hotelAddresses  Hotel[] @relation("HotelState")
officeAddresses Hotel[] @relation("OfficeState")
  clients         Client[]  // One-to-many relationship with Client

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("states") // Map the table name to "states"
}

model City {
  id        Int      @id @default(autoincrement())
   agencyId  Int
  agency   Agency   @relation(fields:[agencyId],references: [id], onDelete: Cascade)
  stateId   Int      // Foreign key to the State table
  state     State    @relation(fields: [stateId], references: [id],onDelete: Cascade) //onDelete caascade
  cityName      String   
 hotelAddresses  Hotel[] @relation("HotelCity")
officeAddresses Hotel[] @relation("OfficeCity")
  clients         Client[]  // One-to-many relationship with Client
itineraries  Itinerary[] // One-to-many relationship with Itinerary
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cities") // Map the table name to "cities"
}

model Sector {
  id        Int      @id @default(autoincrement())
   agencyId  Int
  agency     Agency   @relation(fields:[agencyId],references: [id], onDelete: Cascade)
  sectorName   String
  tours      Tour[]    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("sectors") // Map the table name to "sectors"
}


model Accommodation {
  id        Int      @id @default(autoincrement())
  agencyId  Int
  agency   Agency   @relation(fields:[agencyId],references: [id], onDelete: Cascade)
  accommodationName    String  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("accommodations") // Map the table name to "sectors"
}

model Vehicle {
  id   Int  @id @default(autoincrement())
  agencyId  Int
  agency   Agency   @relation(fields:[agencyId],references:[id],onDelete:Cascade)
  vehicleName String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vehicles")
}

model Airline {
  id   Int  @id @default(autoincrement())
  agencyId  Int
  agency   Agency   @relation(fields:[agencyId],references:[id],onDelete:Cascade)
  airlineName String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("airlines")
}

model Hotel {
  id                  Int      @id @default(autoincrement())
  agencyId            Int
  agency              Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  hotelName           String
  hotelAddressLine1   String?
  hotelAddressLine2   String?
  hotelAddressLine3   String?

  hotelPincode        String?
  officeAddressLine1  String?
  officeAddressLine2  String?
  officeAddressLine3  String?
  hotelCountryId   Int?
hotelStateId     Int?
hotelCityId      Int?
officeCountryId  Int?
officeStateId    Int?
officeCityId     Int?

hotelCountry     Country? @relation("HotelCountry", fields: [hotelCountryId], references: [id], onDelete: SetNull)
hotelState       State?   @relation("HotelState", fields: [hotelStateId], references: [id], onDelete: SetNull)
hotelCity        City?    @relation("HotelCity", fields: [hotelCityId], references: [id], onDelete: SetNull)

officeCountry    Country? @relation("OfficeCountry", fields: [officeCountryId], references: [id], onDelete: SetNull)
officeState      State?   @relation("OfficeState", fields: [officeStateId], references: [id], onDelete: SetNull)
officeCity       City?    @relation("OfficeCity", fields: [officeCityId], references: [id], onDelete: SetNull)

  officePincode       String?
  contactPerson       String?
  hotelContactNo1     String?
  hotelContactNo2     String?
  officeContactNo1    String?
  officeContactNo2    String?
  email1              String?
  email2              String?
  website             String?
  panNumber           String?
  bankAccountNumber1   String?
  branch1              String?
  beneficiaryName1     String?
  ifsc_code1           String?
  swiftCode1           String?
  // bankName1            String?
  // bankName2            String?
  bank1Id  Int?        
  bank2Id  Int?
  bank1    Bank? @relation("Bank1", fields: [bank1Id], references: [id], onDelete: SetNull)
  bank2    Bank? @relation("Bank2", fields: [bank2Id], references: [id], onDelete: SetNull)
  bankAccountNumber2   String?
  branch2              String?
  beneficiaryName2     String?
  ifsc_code2           String?
  swiftCode2           String?

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("hotels")
}

model Client {
  id          Int      @id @default(autoincrement())
  agencyId    Int      // Foreign key to the Agency table
  agency      Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  clientName  String   // Client name
  gender      String?   // Gender
  email       String?
  dateOfBirth DateTime? // Date of birth
  marriageDate DateTime? // Marriage date (optional)
  referBy     String?  // Referred by (optional)
  address1    String?   // Address Line 1
  address2    String?  // Address Line 2 (optional)
   stateId         Int?             // Foreign key to the State table
  state           State?           @relation(fields: [stateId], references: [id], onDelete: SetNull)
  cityId          Int?             // Foreign key to the City table
  city            City?            @relation(fields: [cityId], references: [id], onDelete: SetNull)
  pincode     String?   // Pincode
  mobile1     String?   // Primary mobile number
  mobile2     String?  // Secondary mobile number (optional)
  gstin       String?  // GSTIN (optional)
  passportNo  String?  // Passport number (optional)
  panNo       String?  // PAN number (optional)
  aadharNo    String?
  familyFriends   FamilyFriends[]  // One-to-many relationship with FamilyFriends

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("clients") // Map the table name to "clients"
}

model FamilyFriends {
  id              Int      @id @default(autoincrement())
  clientId        Int      // Foreign key to the Client table
  client          Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  name            String   // Name of the family member or friend
  gender          String?  // Gender
  relation        String?   // Relation to the client (e.g., Father, Mother, Friend)
  aadharNo        String?  // AADHAR number (optional)
  dateOfBirth     DateTime? // Date of birth (optional)
  anniversaryDate DateTime? // Anniversary date (optional)
  foodType        String?  // Food type (e.g., Vegetarian, Non-Vegetarian)
  mobile          String?  // Mobile number (optional)
  email           String?  // Email address (optional)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("family_friends") // Map the table name to "family_friends"
}


model Bank {
  id   Int  @id @default(autoincrement())
  agencyId  Int
  agency   Agency   @relation(fields:[agencyId],references:[id],onDelete:Cascade)
  bankName String
  hotels1  Hotel[]  @relation("Bank1")
  hotels2  Hotel[]  @relation("Bank2")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("banks")
}


model Fair {
  id   Int  @id @default(autoincrement())
  agencyId  Int
  agency   Agency   @relation(fields:[agencyId],references:[id],onDelete:Cascade)
  fairName String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fairs")
}

model Tour {
  id          Int      @id @default(autoincrement())
  agencyId    Int      // Foreign key to the Agency table
  agency      Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  tourTitle   String   // Title of the tour
  tourType    String?   // Type of the tour (e.g., Adventure, Leisure)
  destination String?   // Destination of the tour
  status      String?   // Status of the tour (e.g., Active, Inactive)
  sectorId    Int?     // Foreign key to the Sector table
  sector      Sector?  @relation(fields: [sectorId], references: [id], onDelete: SetNull)
  uploadUUID  String?  // Stores the UUID directory name
  attachment  String?  // File attachment (optional)
  notes       String?  // Notes about the tour (optional)
  itineraries Itinerary[] // One-to-many relationship with Itinerary
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tours") // Map the table name to "tours"
}

model Itinerary {
  id          Int      @id @default(autoincrement())
  tourId      Int      // Foreign key to the Tour table
  tour        Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
  day         Int      // Day number of the itinerary
  description String   // Description of the itinerary for the day
  cityId      Int?     // Foreign key to the City table
  city        City?    @relation(fields: [cityId], references: [id], onDelete: SetNull)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("itineraries") // Map the table name to "itineraries"
}
