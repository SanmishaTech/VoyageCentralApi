generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  agencyId           Int?      // Foreign key to the Agency table
  branchId           Int?      // Foreign key to the Branch table
  name               String
  email              String    @unique
  communicationEmail String?   // Added: Optional email for communications
  mobile1            String?   // Added: Primary mobile number
  mobile2            String?   // Added: Secondary mobile number
  password           String
  role               String
  active             Boolean   @default(true)
  lastLogin          DateTime?
  resetToken         String?   
  resetTokenExpires  DateTime?
  agency             Agency?   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  branch             Branch?   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@map("users")
}

model Package {
  id              Int       @id @default(autoincrement())
  packageName     String    @map("packages")
  numberOfBranches Int
  usersPerBranch  Int
  periodInMonths  Int
  cost            Decimal   @db.Decimal(10, 2) // Updated to Decimal type with precision and scale
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("packages")
  Subscription    Subscription[]  
  Agency          Agency[]       
}

model Agency {
  id                   Int       @id @default(autoincrement())
  currentSubscriptionId Int?     // Foreign key to the Subscription table
  businessName         String    // Business name
  addressLine1         String    // Address Line 1
  addressLine2         String?   // Address Line 2 (optional)
  state                String?    
  city                 String?    
  pincode              String?    
  currentSubscription  Subscription? @relation("CurrentSubscription", fields: [currentSubscriptionId], references: [id])
  logo                 String?   // Logo (file path or URL)
  letterHead           String?   // Letterhead attachment (file path or URL)
  contactPersonName    String    // Contact person name
  contactPersonEmail   String    // Contact person email
  contactPersonPhone   String    // Contact person phone
  gstin                String    // GSTIN
  subscriptions        Subscription[] @relation("AgencySubscriptions") 
  users                User[]         
  branches             Branch[]
  countries            Country[]
  states            State[]
  cities            City[]
  sectors            Sector[]

  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@map("agencies") // Map the table name to "agencies"
  Package Package[]  // Added onDelete: Cascade
}

model Subscription {
  id              Int       @id @default(autoincrement())
  agencyId        Int       // Foreign key to the Agency table
  agency          Agency    @relation("AgencySubscriptions", fields: [agencyId], references: [id], onDelete: Cascade)
  packageId       Int       // Foreign key to the Package table
  package         Package   @relation(fields: [packageId], references: [id])
  cost            Decimal   @db.Decimal(10, 2) // Added cost field with Decimal type
  startDate       DateTime  // Subscription start date
  endDate         DateTime  // Subscription end date
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("subscriptions") // Map the table name to "subscriptions"
  Agency Agency[] @relation("CurrentSubscription")
}

model Branch {
  id            Int       @id @default(autoincrement())
  agencyId      Int      // Foreign key to Agency
  branchName    String
  address       String
  contactName   String
  contactEmail  String
  contactMobile String
  agency        Agency    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  users         User[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("branches")
}

model Country {
  id        Int      @id @default(autoincrement())
  agencyId  Int
  agency   Agency   @relation(fields:[agencyId],references: [id], onDelete: Cascade)
  countryName      String   //@unique
  states    State[]  // One-to-many relationship with State
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("countries") // Map the table name to "countries"
}

model State {
  id        Int      @id @default(autoincrement())
   agencyId  Int
  agency   Agency   @relation(fields:[agencyId],references: [id], onDelete: Cascade)
   countryId Int      // Foreign key to the Country table
  country   Country  @relation(fields: [countryId], references: [id],onDelete: Cascade) //onDelete cascade
  stateName      String   
  cities    City[]   // One-to-many relationship with City
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("states") // Map the table name to "states"
}

model City {
  id        Int      @id @default(autoincrement())
   agencyId  Int
  agency   Agency   @relation(fields:[agencyId],references: [id], onDelete: Cascade)
  stateId   Int      // Foreign key to the State table
  state     State    @relation(fields: [stateId], references: [id],onDelete: Cascade) //onDelete caascade
  cityName      String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cities") // Map the table name to "cities"
}

model Sector {
  id        Int      @id @default(autoincrement())
   agencyId  Int
  agency   Agency   @relation(fields:[agencyId],references: [id], onDelete: Cascade)
  sectorName    String   @unique // Sector name must be unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("sectors") // Map the table name to "sectors"
}

