generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  agencyId           Int?      // Foreign key to the Agency table
  branchId           Int?      // Foreign key to the Branch table
  name               String
  email              String    @unique
  communicationEmail String?   // Added: Optional email for communications
  mobile1            String?   // Added: Primary mobile number
  mobile2            String?   // Added: Secondary mobile number
  address            String?   @db.Text
  bloodGroup         String?   
  gender             String?   
  dateOfBirth        DateTime?
  password           String
  role               String
  active             Boolean   @default(true)
  lastLogin          DateTime?
  resetToken         String?   
  resetTokenExpires  DateTime?
  agency             Agency?   @relation(fields: [agencyId], references: [id], onDelete: Restrict)
  branch             Branch?   @relation(fields: [branchId], references: [id], onDelete: Restrict)
  followUps         FollowUp[] // One-to-many relationship with FollowUp
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@map("users")
}

model Package {
  id              Int       @id @default(autoincrement())
  packageName     String    @map("packages")
  numberOfBranches Int
  usersPerBranch  Int
  periodInMonths  Int
  cost            Decimal   @db.Decimal(10, 2) // Updated to Decimal type with precision and scale
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("packages")
  Subscription    Subscription[]  
  Agency          Agency[]       
}

model Agency {
  id                   Int       @id @default(autoincrement())
  currentSubscriptionId Int?     // Foreign key to the Subscription table
  businessName         String    // Business name
  addressLine1         String    @db.Text
  addressLine2         String?   @db.Text
  // stateId  Int?
  // state                State?    @relation("AgencyState", fields: [stateId], references: [id], onDelete: Restrict)
  // cityId  Int?
  // city   City?   @relation("AgencyCity", fields:[cityId],references: [id], onDelete: Restrict)
  stateName         String?   // State name
  cityName          String?   // City name
  pincode              String?    
  currentSubscription  Subscription? @relation("CurrentSubscription", fields: [currentSubscriptionId], references: [id],onDelete: Restrict)
  uploadUUID          String?  // Stores the UUID directory name
  logoFilename        String?  // Stores only the filename for the logo
  letterheadFilename  String?  // Stores only the filename for the letterhead
  contactPersonName    String    // Contact person name
  contactPersonEmail   String    // Contact person email
  contactPersonPhone   String    // Contact person phone
  contactPersonName2    String?    // Contact person name
  contactPersonEmail2   String?    // Contact person email
  contactPersonPhone2   String?    // Contact person phone
  gstin                String    // GSTIN
  invoiceNumber  String?  // Invoice number (optional)
  invoicePath  String?  // Invoice name (optional)
  subscriptions        Subscription[] @relation("AgencySubscriptions") 
  users                User[]         
  branches             Branch[]
  countries            Country[]
  states               State[]  @relation("stateAgency") 
  cities               City[]   @relation("cityAgency") 
  sectors              Sector[]
  accommodations       Accommodation[]
  vehicles             Vehicle[]
  airlines             Airline[]
  hotels               Hotel[]
  clients               Client[]
  banks               Bank[]
  services               Service[]
  tours               Tour[]
  bookings           Booking[]
  hotelBookings     HotelBooking[]
  agents             Agent[]  
  vehicleBookings    VehicleBooking[]
  bookingReceipts    BookingReceipt[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@map("agencies") // Map the table name to "agencies"
  Package Package[]  // Added onDelete: Cascade
}

model Subscription {
  id              Int       @id @default(autoincrement())
  agencyId        Int       // Foreign key to the Agency table
  agency          Agency    @relation("AgencySubscriptions", fields: [agencyId], references: [id], onDelete: Restrict)
  packageId       Int       // Foreign key to the Package table
  package         Package   @relation(fields: [packageId], references: [id])
  cost            Decimal   @db.Decimal(10, 2) // Added cost field with Decimal type
  cgstPercent     Int?
  cgstAmount      Decimal?   @db.Decimal(10, 2) // Added cost field with Decimal type
  sgstPercent     Int?
  sgstAmount      Decimal?   @db.Decimal(10, 2) // Added cost field with Decimal type
  igstPercent     Int?
  igstAmount      Decimal?   @db.Decimal(10, 2) // Added cost field with Decimal type
  totalAmount     Decimal   @db.Decimal(10, 2) // Added cost field with Decimal type
  paymentDate    DateTime // Payment date (optional)
  paymentMode    String  // Payment mode (optional)
  utrNumber    String? // UPI number (optional)
  neftImpfNumber String? // NEFT/IMPS number (optional)  
  chequeNumber String? // Cheque number (optional)
  chequeDate DateTime? // Cheque date (optional)
  bankName String? // Bank name (optional)
  invoiceNumber String?   @unique// Invoice number (optional)
  invoiceDate DateTime? // Invoice date (optional)
  invoicePath String? // Invoice name (optional)
  startDate       DateTime  // Subscription start date
  endDate         DateTime  // Subscription end date
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("subscriptions") // Map the table name to "subscriptions"
  Agency Agency[] @relation("CurrentSubscription")
}

model Branch {
  id            Int       @id @default(autoincrement())
  agencyId      Int      // Foreign key to Agency
  branchName    String
  address       String?  @db.Text
  contactName   String?
  contactEmail  String?
  contactMobile String?
  pincode       String?
  agency        Agency    @relation(fields: [agencyId], references: [id], onDelete: Restrict)
  users         User[]
  bookings Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("branches")
}

model Country {
  id        Int      @id @default(autoincrement())
  agencyId  Int?
  agency   Agency?   @relation(fields:[agencyId],references: [id], onDelete: Restrict)
  countryName      String   //@unique
  states    State[]  // One-to-many relationship with State
 hotelAddresses  Hotel[] @relation("HotelCountry")
officeAddresses Hotel[] @relation("OfficeCountry")
agents             Agent[]  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("countries") // Map the table name to "countries"
}

model State {
  id        Int      @id @default(autoincrement())
   agencyId  Int?
  agency   Agency?   @relation("stateAgency",fields:[agencyId],references: [id], onDelete: Restrict)
   countryId Int      // Foreign key to the Country table
  country   Country  @relation(fields: [countryId], references: [id],onDelete: Restrict) //onDelete cascade
  stateName      String   
  cities    City[]   // One-to-many relationship with City
hotelAddresses  Hotel[] @relation("HotelState")
officeAddresses Hotel[] @relation("OfficeState")
  clients         Client[]  // One-to-many relationship with Client
  // agencies         Agency[]  @relation("AgencyState")
  agents             Agent[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("states") // Map the table name to "states"
}

model City {
  id        Int      @id @default(autoincrement())
   agencyId  Int?
  agency   Agency?   @relation("cityAgency",fields:[agencyId],references: [id], onDelete: Restrict)
  stateId   Int      // Foreign key to the State table
  state     State    @relation(fields: [stateId], references: [id],onDelete: Restrict) //onDelete caascade
  cityName      String   
 hotelAddresses  Hotel[] @relation("HotelCity")
officeAddresses Hotel[] @relation("OfficeCity")
  clients         Client[]  // One-to-many relationship with Client
itineraries  Itinerary[] // One-to-many relationship with Itinerary
bookingDetails BookingDetail[] // One-to-many relationship with TourEnquiry
  hotelBookings    HotelBooking[]
  // agencies         Agency[]   @relation("AgencyCity")
    agents             Agent[]  
      vehicleBookings    VehicleBooking[]
  vehicleItineraries VehicleItinerary[]
  vehicleHotelBookings VehicleHotelBooking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cities") // Map the table name to "cities"
}

model Sector {
  id        Int      @id @default(autoincrement())
   agencyId  Int
  agency     Agency   @relation(fields:[agencyId],references: [id], onDelete: Restrict)
  sectorName   String
  tours      Tour[]    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("sectors") // Map the table name to "sectors"
}


model Accommodation {
  id        Int      @id @default(autoincrement())
  agencyId  Int
  agency   Agency   @relation(fields:[agencyId],references: [id], onDelete: Restrict)
  accommodationName    String  
  hotelBookings    HotelBooking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("accommodations") // Map the table name to "sectors"
}

model Vehicle {
  id   Int  @id @default(autoincrement())
  agencyId  Int
  agency   Agency   @relation(fields:[agencyId],references:[id],onDelete:Restrict)
  vehicleName String
  vehicleBookings    VehicleBooking[]
  journeyBookings  JourneyBooking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vehicles")
}

model Airline {
  id   Int  @id @default(autoincrement())
  agencyId  Int
  agency   Agency   @relation(fields:[agencyId],references:[id],onDelete:Restrict)
  airlineName String
  journeyBookings  JourneyBooking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("airlines")
}

model Hotel {
  id                  Int      @id @default(autoincrement())
  agencyId            Int
  agency              Agency   @relation(fields: [agencyId], references: [id], onDelete: Restrict)
  hotelName           String
  hotelAddressLine1   String?  @db.Text
  hotelAddressLine2   String? @db.Text
  hotelAddressLine3   String?  @db.Text
  hotelPincode        String?
  officeAddressLine1  String?     @db.Text
  officeAddressLine2  String?     @db.Text
  officeAddressLine3  String?      @db.Text
  hotelCountryId   Int?
hotelStateId     Int?
hotelCityId      Int?
officeCountryId  Int?
officeStateId    Int?
officeCityId     Int?
hotelCountry     Country? @relation("HotelCountry", fields: [hotelCountryId], references: [id], onDelete: Restrict)
hotelState       State?   @relation("HotelState", fields: [hotelStateId], references: [id], onDelete: Restrict)
hotelCity        City?    @relation("HotelCity", fields: [hotelCityId], references: [id], onDelete: Restrict)
officeCountry    Country? @relation("OfficeCountry", fields: [officeCountryId], references: [id], onDelete: Restrict)
officeState      State?   @relation("OfficeState", fields: [officeStateId], references: [id], onDelete: Restrict)
officeCity       City?    @relation("OfficeCity", fields: [officeCityId], references: [id], onDelete: Restrict)
  officePincode       String?
  contactPerson       String?
  contactPersonEmail       String?
  contactPersonMobile       String?
  contactPersonName2       String?
  contactPersonEmail2       String?
  contactPersonMobile2       String?
  hotelContactNo1     String?
  hotelContactNo2     String?
  officeContactNo1    String?
  officeContactNo2    String?
  email1              String?
  email2              String?
  website             String?
  panNumber           String?
  bankAccountNumber1   String?
  branch1              String?
  beneficiaryName1     String?
  ifsc_code1           String?
  swiftCode1           String?
  bank1Id  Int?        
  bank2Id  Int?
  bank1    Bank? @relation("Bank1", fields: [bank1Id], references: [id], onDelete: Restrict)
  bank2    Bank? @relation("Bank2", fields: [bank2Id], references: [id], onDelete: Restrict)
  bankAccountNumber2   String?
  branch2              String?
  beneficiaryName2     String?
  ifsc_code2           String?
  swiftCode2           String?
  hotelBookings    HotelBooking[]
    vehicleHotelBookings VehicleHotelBooking[]

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("hotels")
}

model Client {
  id          Int      @id @default(autoincrement())
  agencyId    Int      // Foreign key to the Agency table
  agency      Agency   @relation(fields: [agencyId], references: [id], onDelete: Restrict)
  clientName  String   // Client name
  gender      String?   // Gender
  email       String?
  dateOfBirth DateTime? // Date of birth
  marriageDate DateTime? // Marriage date (optional)
  referBy     String?  // Referred by (optional)
  address1    String? @db.Text
  address2    String?  @db.Text
   stateId         Int?             // Foreign key to the State table
  state           State?           @relation(fields: [stateId], references: [id], onDelete: Restrict)
  cityId          Int?             // Foreign key to the City table
  city            City?            @relation(fields: [cityId], references: [id], onDelete: Restrict)
  pincode     String?   // Pincode
  mobile1     String?   // Primary mobile number
  mobile2     String?  // Secondary mobile number (optional)
  gstin       String?  // GSTIN (optional)
  passportNo  String?  // Passport number (optional)
  panNo       String?  // PAN number (optional)
  aadharNo    String?
  familyFriends   FamilyFriends[]  // One-to-many relationship with FamilyFriends
  bookings Booking[] // One-to-many relationship with TourEnquiry

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("clients") // Map the table name to "clients"
}

model FamilyFriends {
  id              Int      @id @default(autoincrement())
  clientId        Int      // Foreign key to the Client table
  client          Client   @relation(fields: [clientId], references: [id], onDelete: Restrict)
  name            String   // Name of the family member or friend
  gender          String?  // Gender
  relation        String?   // Relation to the client (e.g., Father, Mother, Friend)
  aadharNo        String?  // AADHAR number (optional)
  dateOfBirth     DateTime? // Date of birth (optional)
  anniversaryDate DateTime? // Anniversary date (optional)
  foodType        String?  // Food type (e.g., Vegetarian, Non-Vegetarian)
  mobile          String?  // Mobile number (optional)
  email           String?  // Email address (optional)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("family_friends") // Map the table name to "family_friends"
}


model Bank {
  id   Int  @id @default(autoincrement())
  agencyId  Int
  agency   Agency   @relation(fields:[agencyId],references:[id],onDelete:Restrict)
  bankName String
  hotels1  Hotel[]  @relation("Bank1")
  hotels2  Hotel[]  @relation("Bank2")
  agents1  Agent[]  @relation("Bank1_Agent")
  agents2  Agent[]  @relation("Bank2_Agent")
  bookingReceipts   BookingReceipt[]
  serviceBookings  ServiceBooking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("banks")
}


model Service {
  id   Int  @id @default(autoincrement())
  agencyId  Int
  agency   Agency   @relation(fields:[agencyId],references:[id],onDelete:Restrict)
  serviceName String
  serviceBookings  ServiceBooking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}

model Tour {
  id          Int      @id @default(autoincrement())
  agencyId    Int      // Foreign key to the Agency table
  agency      Agency   @relation(fields: [agencyId], references: [id], onDelete: Restrict)
  tourTitle   String   // Title of the tour
  tourType    String?   // Type of the tour (e.g., Adventure, Leisure)
  destination String?   // Destination of the tour
  status      String?   // Status of the tour (e.g., Active, Inactive)
  sectorId    Int?     // Foreign key to the Sector table
  sector      Sector?  @relation(fields: [sectorId], references: [id], onDelete: Restrict)
  uploadUUID  String?  // Stores the UUID directory name
  attachment  String?  // File attachment (optional)
  notes       String?   @db.Text
  numberOfNights   Int?       // Number of nights
  numberOfTravelers   Int?       // Number of travelers
  isGroupTour Boolean @default(false) // Indicates if it's a group tour
  itineraries Itinerary[] // One-to-many relationship with Itinerary
  bookings Booking[] // One-to-many relationship with TourEnquiry
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tours") // Map the table name to "tours"
}

model Itinerary {
  id          Int      @id @default(autoincrement())
  tourId      Int      // Foreign key to the Tour table
  tour        Tour     @relation(fields: [tourId], references: [id], onDelete: Restrict)
  day         Int      // Day number of the itinerary
  description String      @db.Text
  cityId      Int?     // Foreign key to the City table
  city        City?    @relation(fields: [cityId], references: [id], onDelete: Restrict)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("itineraries") // Map the table name to "itineraries"
}

model Booking {
  id                      Int       @id @default(autoincrement())
  agencyId                Int       // Foreign key to the Agency table
  agency                  Agency    @relation(fields: [agencyId], references: [id], onDelete:Restrict)
  bookingNumber           String    
  bookingDate             DateTime  // Date of booking
  journeyDate             DateTime?  // Journey date
  departureDate           DateTime? // Optional departure date
  budgetField              String?   // Budget field with precision and scale
  clientId                Int?       // Foreign key to the Client table
  client                  Client?    @relation(fields: [clientId], references: [id],onDelete:Restrict)
  numberOfAdults          Int?       // Number of adults
  numberOfChildren5To11   Int?       // Number of children between age 5-11
  numberOfChildrenUnder5  Int?       // Number of children under age 5
  branchId                Int?      // Foreign key to the Branch table
  branch                  Branch?   @relation(fields: [branchId], references: [id],onDelete:Restrict)
  tourId                  Int?      // Foreign key to the Tour table
  tour                    Tour?     @relation(fields: [tourId], references: [id], onDelete: Restrict)
  bookingDetail          String?    @db.Text
  isJourney               Boolean   @default(false) // Indicates if it's a journey
  isHotel                 Boolean   @default(false) // Indicates if a hotel is included
  isVehicle               Boolean   @default(false) // Indicates if a vehicle is included
  isPackage               Boolean   @default(false) // Indicates if it's a package
  bookingDetails      BookingDetail[] // One-to-many relationship with TourBookingDetail
  followUpDate     DateTime?  // Date of the follow-up
  remarks          String?   // Remarks for the follow-up
  enquiryStatus   String?   // Status of the enquiry (e.g., Open, Closed)
  bookingType     String?   // Type of booking (e.g., Group, Individual)
  isGroupTourBooking Boolean @default(false) // Indicates if it's a group tour booking
  FollowUps       FollowUp[]
  journeyBookings  JourneyBooking[]
  hotelBookings    HotelBooking[]
  serviceBookings  ServiceBooking[]
  vehicleBookings    VehicleBooking[]
  travelDocuments TravelDocument[]
  tourMembers      TourMember[] // One-to-many relationship with TourMember
  groupTourMembers   GroupTourMember[] // One-to-many relationship with GroupTourMember
  bookingReceipts   BookingReceipt[]
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  @@map("bookings") // Map the table name to "tour_enquiries"
}

model BookingDetail {
  id              Int       @id @default(autoincrement())
  bookingId   Int       // Foreign key to the TourEnquiry table
  booking     Booking @relation(fields: [bookingId], references: [id], onDelete: Restrict)
  day             Int       // Day number of the booking
  date            DateTime  // Date of the booking
  description     String    @db.Text
  cityId          Int?      // Foreign key to the City table
  city            City?     @relation(fields: [cityId], references: [id],onDelete: Restrict)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("booking_details") // Map the table name to "tour_booking_details"
}

model FollowUp {
  id               Int       @id @default(autoincrement())
  bookingId        Int       // Foreign key to the Booking table
  booking          Booking   @relation(fields: [bookingId], references: [id],onDelete: Restrict)
  userId           Int       // Foreign key to the User table
  user             User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  followUpDate     DateTime  // Date of the follow-up
  nextFollowUpDate DateTime? // Optional next follow-up date
  remarks          String    @db.Text// Remarks for the follow-up
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("follow_ups") // Map the table name to "follow_ups"
}

model JourneyBooking {
  id                Int       @id @default(autoincrement())
  bookingId         Int       // Foreign key to the Booking table
  booking           Booking   @relation(fields: [bookingId], references: [id], onDelete: Restrict)
  mode              String    // Mode of transport (e.g., Train, Bus, Flight)
  fromPlace         String    // Starting place
  toPlace           String    // Destination place
  journeyBookingDate DateTime // Date of booking the journey
  fromDepartureDate DateTime  // Departure date from the starting place
  toArrivalDate     DateTime  // Arrival date at the destination
  foodType          String?   // Food type (e.g., Vegetarian, Non-Vegetarian)
  billDescription   String?    @db.Text
  trainName         String?   // Train name (optional)
  class             String?   // Class (e.g., Sleeper, AC)
  pnrNumber         String?   // PNR number (optional)
  trainNumber       String?   // Train number (optional)
  busName           String?   // Bus name (optional)
  flightNumber      String?   // Flight number (optional)
  airlineId         Int?      // Foreign key to the Airline table
  airline           Airline?  @relation(fields: [airlineId], references: [id], onDelete: Restrict)
  vehicleId         Int?      // Foreign key to the Airline table
  vehicle           Vehicle?  @relation(fields: [vehicleId], references: [id], onDelete: Restrict)
  amount           Decimal?  @db.Decimal(10, 2) // Amount for the journey booking
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("journey_bookings") // Map the table name to "journey_bookings"
}


model HotelBooking {
  id                  Int       @id @default(autoincrement())
  agencyId                Int       // Foreign key to the Agency table
  agency                  Agency    @relation(fields: [agencyId], references: [id], onDelete:Restrict)
  bookingId           Int       // Foreign key to the Booking table
  booking             Booking   @relation(fields: [bookingId], references: [id], onDelete: Restrict)
  hrvNumber           String       // HRV number
  partyComingFrom     String    // Party coming from
  checkInDate         DateTime  // Check-in date
  checkOutDate        DateTime  // Check-out date
  nights              Int?       // Number of nights
  cityId              Int       // Foreign key to the City table
  city                City      @relation(fields: [cityId], references: [id],onDelete: Restrict)
  hotelId             Int       // Foreign key to the Hotel table
  hotel               Hotel     @relation(fields: [hotelId], references: [id],onDelete: Restrict)
  plan                String?    // Plan (e.g., CP, MAP, AP)
  rooms               Int?       // Number of rooms
  accommodationId     Int?       // Foreign key to the Accommodation table
  accommodation       Accommodation? @relation(fields: [accommodationId], references: [id], onDelete: Restrict)
  tariffPackage       String?    // Tariff package
  accommodationNote   String?    @db.Text
  extraBed            Boolean   @default(false) // Indicates if extra bed is required
  beds                Int?      // Number of beds (optional)
  extraBedCost        Decimal?  @db.Decimal(10, 2) // Cost of extra bed
  hotelBookingDate    DateTime  // Date of hotel booking
  bookingConfirmedBy  String?    // Booking confirmed by (optional)
  confirmationNumber  String?   // Confirmation number (optional)
  billingInstructions String?    @db.Text
  specialRequirement  String?   @db.Text
  notes               String?   @db.Text// Notes (optional)
  billDescription     String?   @db.Text// Bill description (optional)
  amount           Decimal?  @db.Decimal(10, 2) // Amount for the journey booking
  totalAmount           Decimal?  @db.Decimal(10, 2)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  @@map("hotel_bookings") // Map the table name to "hotel_bookings"
}

model ServiceBooking {
  id                  Int       @id @default(autoincrement())
  bookingId           Int       // Foreign key to the Booking table
  booking             Booking   @relation(fields: [bookingId], references: [id], onDelete: Restrict)
  agentId                Int?       // Foreign key to the Agency table
  agent                  Agent?    @relation(fields: [agentId], references: [id], onDelete:Restrict)
  serviceId                Int?       // Foreign key to the Agency table
  service                  Service?    @relation(fields: [serviceId], references: [id], onDelete:Restrict)
  description         String      @db.Text
  cost                Decimal?  @db.Decimal(10, 2)
  isPaid             Boolean   @default(false) 
  paymentMode    String?   // Payment mode (e.g., Cash, Cheque, UPI)
  paymentDate    DateTime? // Payment date (optional)
  paidAmount    Decimal?  @db.Decimal(10, 2) // Amount paid 
  bankId         Int?     
  bank           Bank?    @relation(fields: [bankId], references: [id], onDelete: Restrict)
  chequeDate     DateTime?
  chequeNumber   String?
  utrNumber      String?
  neftImpfNumber String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  @@map("service_bookings")
}

// start
model Agent {
  id                    Int      @id @default(autoincrement())
  agencyId              Int
  agency                Agency   @relation(fields: [agencyId], references: [id], onDelete: Restrict)
  agentName             String
  addressLine1          String @db.Text
  addressLine2          String? @db.Text
  addressLine3          String? @db.Text
  countryId             Int
  country               Country @relation(fields: [countryId], references: [id], onDelete: Restrict)
  stateId               Int
  state                 State   @relation(fields: [stateId], references: [id], onDelete: Restrict)
  cityId                Int
  city                  City    @relation(fields: [cityId], references: [id], onDelete: Restrict)
  pincode               String?
  contactPersonName    String
  mobile1  String
  mobile2  String?
  email1   String
  email2   String?
  websiteName           String?
  panNumber             String
  landlineNumber1       String?
  landlineNumber2       String?
  bank1Id               Int
  bank1                 Bank    @relation("Bank1_Agent", fields: [bank1Id], references: [id], onDelete: Restrict)
  bankAccountNumber1    String
  branch1               String
  beneficiaryName1      String
  ifscCode1             String
  swiftCode1            String
  bank2Id               Int?
  bank2                 Bank?    @relation("Bank2_Agent", fields: [bank2Id], references: [id], onDelete: Restrict)
  bankAccountNumber2    String?
  branch2               String?  // Named branch3 as specified. Adjust if needed.
  beneficiaryName2      String?
  ifscCode2             String?
  swiftCode2            String?
  isVehicle Boolean @default(false) 
  isAirline Boolean @default(false) 
  isTrain   Boolean @default(false)
  vehicleBookings    VehicleBooking[]
  serviceBookings  ServiceBooking[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("agents")
}

model VehicleBooking {
  id                  Int       @id @default(autoincrement())
  bookingId           Int
  booking             Booking   @relation(fields: [bookingId], references: [id], onDelete: Restrict)
  agencyId            Int
  agency              Agency    @relation(fields: [agencyId], references: [id], onDelete: Restrict)
  vehicleHrvNumber    String    // HRV number for vehicle booking
  vehicleBookingDate  DateTime
  vehicleId           Int       // Assuming vehicleId refers to an existing Vehicle
  vehicle             Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Restrict)
  numberOfVehicles    Int
  fromDate            DateTime
  toDate              DateTime
  days                Int
  cityId              Int
  city                City      @relation(fields: [cityId], references: [id], onDelete: Restrict)
  agentId             Int       // Agent responsible for the booking
  agent               Agent     @relation(fields: [agentId], references: [id], onDelete: Restrict)
  pickupPlace         String
  terms               String?  @db.Text
  specialRequest      String?  @db.Text
  vehicleNote         String?  @db.Text
  specialNote         String?  @db.Text
  summaryNote         String?  @db.Text
  billDescription     String?  @db.Text
  amount           Decimal?  @db.Decimal(10, 2) // Amount for the journey booking
  vehicleItineraries VehicleItinerary[]
  vehicleHotelBookings VehicleHotelBooking[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("vehicle_bookings")
}

model VehicleItinerary {
  id                 Int       @id @default(autoincrement())
  vehicleBookingId   Int
  vehicleBooking     VehicleBooking @relation(fields: [vehicleBookingId], references: [id], onDelete: Restrict)
  day                Int       // Day number of the itinerary
  date               DateTime
  description        String    @db.Text
  cityId             Int?
  city               City?      @relation(fields: [cityId], references: [id], onDelete: Restrict)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@map("vehicle_itineraries")
}

model VehicleHotelBooking {
  id                 Int       @id @default(autoincrement())
  vehicleBookingId   Int
  vehicleBooking     VehicleBooking @relation(fields: [vehicleBookingId], references: [id], onDelete: Restrict)
  cityId             Int
  city               City      @relation(fields: [cityId], references: [id], onDelete: Restrict)
  hotelId            Int
  hotel              Hotel     @relation(fields: [hotelId], references: [id], onDelete: Restrict)
  checkInDate        DateTime
  checkOutDate       DateTime
  numberOfRooms      Int
  plan               String
  numberOfNights     Int
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  @@map("vehicle_hotel_bookings")
}


model TravelDocument {
  id             Int      @id @default(autoincrement())
  bookingId      Int
  booking        Booking  @relation(fields: [bookingId], references: [id], onDelete: Restrict)
  description    String?   @db.Text // Up to 2000 characters
  isPrivate      Boolean  @default(false)
  uploadUUID     String?  // Stores the UUID directory name (optional)
  attachment String?  // Stores only the filename for the attachment (optional)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("travel_documents")
}

model TourMember {
  id               Int       @id @default(autoincrement())
  bookingId        Int
  booking          Booking   @relation(fields: [bookingId], references: [id], onDelete: Restrict)
  name             String?    // Name of the tour member
  gender           String?    // Gender
  aadharNo        String?  // AADHAR number (optional)
  relation         String?    // Relation to the booking/client
  dateOfBirth      DateTime? // Date of birth (optional)
  anniversaryDate  DateTime? // Anniversary date (optional)
  foodType         String?   // Food type (e.g., Vegetarian, Non-Vegetarian) (optional)
  mobile           String?   // Mobile number (optional)
  email            String?   // Email (optional)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("tour_members")
}

model GroupTourMember {
  id               Int       @id @default(autoincrement())
  bookingId        Int
  booking          Booking   @relation(fields: [bookingId], references: [id], onDelete: Restrict)
  name             String?    // Name of the tour member
  gender           String?    // Gender
  aadharNo        String?  // AADHAR number (optional)
  relation         String?    // Relation to the booking/client
  dateOfBirth      DateTime? // Date of birth (optional)
  anniversaryDate  DateTime? // Anniversary date (optional)
  foodType         String?   // Food type (e.g., Vegetarian, Non-Vegetarian) (optional)
  mobile           String?   // Mobile number (optional)
  email            String?   // Email (optional)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("group_tour_members")
}

model BookingReceipt {
  id             Int      @id @default(autoincrement())
  agencyId       Int
  agency         Agency   @relation(fields: [agencyId], references: [id], onDelete: Restrict)
  bookingId      Int
  booking        Booking  @relation(fields: [bookingId], references: [id], onDelete: Restrict)
  receiptNumber  String   // Receipt number
  receiptDate    DateTime // Receipt date
  paymentMode    String   // Payment mode (e.g., Cash, Cheque, UPI, Net Banking)
  description    String?  @db.Text // Description of the payment
  amount         Decimal  @db.Decimal(10, 2)
  invoiceDate   DateTime? // Invoice date (optional)
  bankId         Int?     
  bank           Bank?    @relation(fields: [bankId], references: [id], onDelete: Restrict)
  chequeDate     DateTime?
  chequeNumber   String?
  utrNumber      String?
  neftImpfNumber String?
  invoiceNumber  String?  // Invoice number (optional)
  invoicePath  String?  // Invoice name (optional)
  cgstPercent     Int?
  cgstAmount      Decimal?   @db.Decimal(10, 2) // Added cost field with Decimal type
  sgstPercent     Int?
  sgstAmount      Decimal?   @db.Decimal(10, 2) // Added cost field with Decimal type
  igstPercent     Int?
  igstAmount      Decimal?   @db.Decimal(10, 2) // Added cost field with Decimal type
  totalAmount     Decimal   @db.Decimal(10, 2) // Added cost field with Decimal type
  paymentDate    DateTime // Payment date (optional)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("booking_receipts")
}

