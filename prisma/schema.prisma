generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  name               String
  email              String    @unique
  password           String
  role               String
  active             Boolean   @default(true)
  lastLogin          DateTime?
  resetToken         String?   // Add this line
  resetTokenExpires  DateTime? // Add this line
  agencyId           Int?      // Foreign key to the Agency table
  branchId           Int?      // Foreign key to the Branch table (if applicable)
  agency             Agency?   @relation(fields: [agencyId], references: [id])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@map("users")
}

model Package {
  id              Int      @id @default(autoincrement())
  packageName     String   @map("packages")
  numberOfBranches Int
  usersPerBranch  Int
  periodInMonths  Int
  cost            Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("packages")
  Subscription Subscription[]
  Agency Agency[]
}

model Agency {
  id                   Int       @id @default(autoincrement())
  businessName         String    // Business name
  addressLine1         String    // Address Line 1
  state1               String    // State 1
  city1                String    // City 1
  pincode1             String    // Pincode 1
  addressLine2         String?   // Address Line 2 (optional)
  state2               String?   // State 2 (optional)
  city2                String?   // City 2 (optional)
  pincode2             String?   // Pincode 2 (optional)
  currentSubscriptionId Int?     // Foreign key to the Subscription table
  currentSubscription  Subscription? @relation("CurrentSubscription", fields: [currentSubscriptionId], references: [id])
  logo                 String?   // Logo (file path or URL)
  letterHead           String?   // Letterhead attachment (file path or URL)
  contactPersonName    String    // Contact person name
  contactPersonEmail   String    // Contact person email
  contactPersonPhone   String    // Contact person phone
  gstin                String    // GSTIN
  subscriptions        Subscription[] @relation("AgencySubscriptions") // One-to-many relationship with subscriptions
  users                User[]         @relation // One-to-many relationship with users
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@map("agencies") // Map the table name to "agencies"
  Package Package[]
}

model Subscription {
  id              Int       @id @default(autoincrement())
  agencyId        Int       // Foreign key to the Agency table
  agency          Agency    @relation("AgencySubscriptions", fields: [agencyId], references: [id])
  packageId       Int       // Foreign key to the Package table
  package         Package   @relation(fields: [packageId], references: [id])
  startDate       DateTime  // Subscription start date
  endDate         DateTime  // Subscription end date
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("subscriptions") // Map the table name to "subscriptions"
  Agency Agency[] @relation("CurrentSubscription")
}